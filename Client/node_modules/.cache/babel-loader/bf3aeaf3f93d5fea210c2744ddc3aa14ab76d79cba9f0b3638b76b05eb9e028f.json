{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\punto\\\\Desktop\\\\Proyecto Integrador\\\\rick_and_morty\\\\src\\\\components\\\\SearchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(_ref) {\n  _s();\n  let {\n    onSearch\n  } = _ref;\n  const [id, setId] = useState('');\n\n  //el event se dispara en el onChange del input en este caso\n  const handleChange = event => {\n    setId(event.target.value);\n  };\n  const handleSearch = () => {\n    //reseteo el input de search\n    onSearch(id);\n    setId('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      onChange: handleChange,\n      value: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Agregar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n}\n_s(SearchBar, \"HQhLVNjveXBilLE1Zdd8jTOIPME=\");\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","SearchBar","_ref","_s","onSearch","id","setId","handleChange","event","target","value","handleSearch","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/punto/Desktop/Proyecto Integrador/rick_and_morty/src/components/SearchBar/SearchBar.jsx"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default function SearchBar({ onSearch }) {\r\n   const [id, setId] = useState('')\r\n   \r\n   //el event se dispara en el onChange del input en este caso\r\n   const handleChange = (event) => {\r\n      setId(event.target.value)\r\n   }\r\n\r\n   const handleSearch = () => { //reseteo el input de search\r\n      onSearch(id);\r\n      setId('');\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         {/* //se iguala el value con id para que siempre este actualizado el valor con el del estado, para que si el usuario cambia el valor se actualice */}\r\n         <input type='search' onChange={handleChange} value={id} />\r\n         {/* //para pasar argumentos a la funcion onSearch, tengo que hacer un CB para que no se ejecute, sino que cuando hagan click se ejecute la callback. */}\r\n         {/* porque si lo pongo suelto al onSearch(id) se invoca cuando lea el codigo, en cambio lee la cb pero no la ejecuta hasta que se haga click */}\r\n         <button onClick={handleSearch}>Agregar</button>\r\n         {/* utilizo la funcion para llamar a onSearch y resetear el input luego de agregado */}\r\n      </div>\r\n   );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,SAASC,SAASA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC3C,MAAM,CAACG,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEhC;EACA,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC7BF,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAAE;IAC1BP,QAAQ,CAACC,EAAE,CAAC;IACZC,KAAK,CAAC,EAAE,CAAC;EACZ,CAAC;EAED,oBACGN,OAAA;IAAAY,QAAA,gBAEGZ,OAAA;MAAOa,IAAI,EAAC,QAAQ;MAACC,QAAQ,EAAEP,YAAa;MAACG,KAAK,EAAEL;IAAG;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAG1DlB,OAAA;MAAQmB,OAAO,EAAER,YAAa;MAAAC,QAAA,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAE5C;AAEZ;AAACf,EAAA,CAvBuBF,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}